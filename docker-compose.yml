version: '3.1'

services:
    location:
        image: piggy1/location:latest
        container_name: piggyback-dev-runner-location-1
        restart: always
        ports:
         - "8080:8080"
        depends_on:
        - mongo
        - broker
    offers:
        image: piggy1/offers:latest
        container_name: piggyback-dev-runner-offers-1
        restart: always
        volumes:
        - ./gcp-secret-vol:/app/config
        ports:
         - "8081:8081"
        depends_on:
        - mongo
        - user
        - location
        - notification
        - broker
    events:
        image: piggy1/events:latest
        container_name: piggyback-dev-runner-events-1
        restart: always
        volumes:
        - ./gcp-secret-vol:/app/config
        ports:
         - "8082:8082"
        depends_on:
        - mongo
        - broker
    user:
        image: piggy1/user:latest
        container_name: piggyback-dev-runner-user-1
        restart: always
        volumes:
        - ./gcp-secret-vol:/app/config
        ports:
         - "8083:8083"
        depends_on:
        - mysql
        - broker
    invoice:
        image: piggy1/invoice:latest
        container_name: piggyback-dev-runner-invoice-1
        restart: always
        ports:
         - "8084:8084"
        depends_on:
        - mysql
        - events
    partner:
        image: piggy1/partner:latest
        container_name: piggyback-dev-runner-partner-1
        restart: always
        volumes:
        - ./gcp-secret-vol:/app/config
        ports:
         - "8085:8085"
        depends_on:
        - mongo
        - broker
    notification:
        image: piggy1/notification:latest
        container_name: piggyback-dev-runner-notification-1
        restart: always
        volumes:
        - ./gcp-secret-vol:/app/config
        ports:
         - "8086:8086"
        depends_on:
        - broker
    order:
        image: piggy1/order:latest
        container_name: piggyback-dev-runner-order-1
        restart: always
        volumes:
        - ./gcp-secret-vol:/app/config
        ports:
         - "8088:8088"
        depends_on:
        - mongo
        - partner
        - broker
    portal:
        image: piggy1/portal:latest
        container_name: piggyback-dev-runner-portal-1
        restart: always
        ports:
         - "5000:5000"
        depends_on:
        - user
        - order
        - partner
        - invoice
    mongo:
        image: mongo:latest
        container_name: piggyback-dev-runner-mongo-1
        restart: always
        volumes: 
        - mongo-data-vol:/data/db
        - mongo-init-vol:/docker-entrypoint-initdb.d
        environment:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    mongo-express:
        image: mongo-express:latest
        container_name: piggyback-dev-runner-mongo-express-1
        restart: always
        ports:
        - "8001:8081"
        environment:
          ME_CONFIG_MONGODB_ADMINUSERNAME: root
          ME_CONFIG_MONGODB_ADMINPASSWORD: example
        depends_on:
        - mongo
    mysql:
        image: mysql:latest
        container_name: piggyback-dev-runner-mysql-1
        restart: always
        volumes: 
        - ./mysql-data-vol:/var/lib/mysql
        - ./mysql-init-vol:/docker-entrypoint-initdb.d
        environment:
          MYSQL_ROOT_PASSWORD: 'password'
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        container_name: piggyback-dev-runner-phpmyadmin-1
        environment:
        - PMA_ARBITRARY=1
        restart: always
        ports:
        - "8000:80"
        depends_on:
        - mysql
    sample:
        image: piggy1/sampleapp:latest
        container_name: piggyback-dev-runner-sampleapp-1
        restart: always
        ports:
         - "8087:8080"
        depends_on:
        - mongo
    nginx:
        image: nginx:stable-alpine
        ports:
          - "80:80"
          - "443:443"
        volumes:
          - ./proxy-data-nginx/nginx:/etc/nginx/conf.d
          - ./proxy-data-nginx/certbot/conf:/etc/letsencrypt
          - ./proxy-data-nginx/certbot/www:/var/www/certbot
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        depends_on:
        - location
        - offers
        - events
        - user
        - invoice
        - partner
        - notification
        - portal
        - sample
        - order
    certbot:
        image: certbot/certbot
        volumes:
        - ./proxy-data-nginx/certbot/conf:/etc/letsencrypt
        - ./proxy-data-nginx/certbot/www:/var/www/certbot
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    zookeeper:
        image: confluentinc/cp-zookeeper:5.3.1
        hostname: zookeeper
        container_name: piggyback-dev-runner-zookeeper-1
        ports:
          - "2181:2181"
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        volumes:
          - ./zookeeper-logs-vol:/var/lib/zookeeper/log
          - ./zookeeper-data-vol:/var/lib/zookeeper/data
    broker:
        image: confluentinc/cp-enterprise-kafka:5.3.1
        hostname: broker
        container_name: piggyback-dev-runner-broker-1
        depends_on:
          - zookeeper
        ports:
          - "29092:29092"
          - "9092:9092"
        environment:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
          CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
          CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
          CONFLUENT_METRICS_ENABLE: 'true'
          CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
        volumes:
          - ./kafka-data-vol:/var/lib/kafka/data
    control-center:
        image: confluentinc/cp-enterprise-control-center:5.3.1
        hostname: control-center
        container_name: piggyback-dev-runner-control-center-1
        depends_on:
          - zookeeper
          - broker
        ports:
          - "9021:9021"
        environment:
          CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
          CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          CONTROL_CENTER_REPLICATION_FACTOR: 1
          CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
          CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
          CONFLUENT_METRICS_TOPIC_REPLICATION: 1
          PORT: 9021
volumes:
    mysql-data-vol:
    mysql-init-vol:
    mongo-data-vol:
    mongo-init-vol:
    gcp-secret-vol:
    proxy-data-nginx:
    zookeeper-logs-vol:
    zookeeper-data-vol:
    kafka-data-vol: